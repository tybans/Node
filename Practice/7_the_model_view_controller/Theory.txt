What is MVC?
    Its all about separation of concern, so making sure that different parts of your code do deiferent things and you clearly know which part is responsible for what.

    Models: 
        - Models are basically objects or is a part of your code that is responsible for representing your data in your code and allowing you to work with your data.
        - Like saving data, fetching data to or from a file or even if it's just in memory, this should be handled by models.
    
    Views:
        -The views are responsible for what the user sees in the end

    Controllers:
        - The controllers are now the connection point between the models and your views.
        - Since the views shouldn't care about the application logic and the models do care about how to save and fetch data and so on, the controllers are the thing working with the models, saving that data or triggering that save process and so on. And also the part where they then pass that data that was fetched to your views.
        - So the controller is the middleman, it contains the in-between logic
    
    Routes:
        - Routes are basically things which define upon which path for which http method which controller code should execute.
        - And the controller is then the thing defining with which model to work and which view to render

    - The controllers are also kind of split up across middleware functions or some of the logic might be separated and moved into another middleware function